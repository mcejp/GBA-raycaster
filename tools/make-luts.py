import argparse
import math
from pathlib import Path


parser = argparse.ArgumentParser()
parser.add_argument("-o", dest="output", type=Path, required=True)

args = parser.parse_args()

f = open(args.output, "wt")


def batches(lst: list, batch_size: int):
    for i in range(0, len(lst), batch_size):
        yield lst[i:i + batch_size]


dx_dy_strs = []
dy_dx_strs = []
SCALE = 2**12

for angle_fx in range(512 + 1):
    angle = (angle_fx % 512) * 2 * math.pi / 512

    dx = math.cos(angle)
    dy = math.sin(angle)

    dx_dy = dx / dy * SCALE if abs(dy) > 1e-4 else 0
    dy_dx = dy / dx * SCALE if abs(dx) > 1e-4 else 0

    dx_dy_strs.append(f"{round(dx_dy):8d}")
    dy_dx_strs.append(f"{round(dy_dx):8d}")


# Note: there are a lot of symmetries in the output that we currently do not exploit
f.write("""\
// generated by make_luts.py

#include "../game.hpp"

extern const int32_t lu_dx_dy[513] = {\n""")

for batch in batches(dx_dy_strs, 4):
    f.write(f"    " + ", ".join(batch) + ",\n")

f.write("""\n
};

extern const int32_t lu_dy_dx[513] = {\n""")

for batch in batches(dy_dx_strs, 4):
    f.write(f"    " + ", ".join(batch) + ",\n")

f.write("};\n")

f.close()
